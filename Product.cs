//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vosimerka
{
    using System;
    using System.Collections.Generic;
    using System.Windows.Media;

    public partial class Product
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.ProductCostHistory = new HashSet<ProductCostHistory>();
            this.ProductMaterial = new HashSet<ProductMaterial>();
            this.ProductSale = new HashSet<ProductSale>();
        }
    
        public int ID { get; set; }
        public string Title { get; set; }
        public Nullable<int> ProductTypeID { get; set; }
        public string ArticleNumber { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }
        public Nullable<int> ProductionPersonCount { get; set; }
        public Nullable<int> ProductionWorkshopNumber { get; set; }
        public decimal MinCostForAgent { get; set; }

        public virtual string ImagePath
        {
            get
            {
                if (Image != "нет")
                {
                    return AppDomain.CurrentDomain.BaseDirectory + "..\\.." + Image + ".jpg";
                }
                else
                {
                    return "\\products\\picture.png";
                }
            }
        }
        public virtual decimal CostForMaterials
        {
            get
            {
                decimal result = 0;
                foreach(ProductMaterial material in this.ProductMaterial)
                {
                    result += material.Material.Cost;
                }
                return result;
            }
        }

        public virtual string MaterialsString
        {
            get
            {
                string result = "";
                foreach(ProductMaterial i in this.ProductMaterial)
                {
                    result += i.Material.Title + " " + i.Count + "\n";
                }
                return result;
            }
        }

        public virtual SolidColorBrush colorOfProduct
        {
            get
            {
                SolidColorBrush color = null;
                List<ProductSale> productSales = new List<ProductSale>();
                foreach(ProductSale i in ProductSale)
                {
                    if (i.SaleDate.Month == DateTime.Now.Month - 1 && i.SaleDate.Year == DateTime.Now.Year)
                    {
                        productSales.Add(i);
                    }
                }
                if (productSales.Count == 0)
                {
                    color = Brushes.Red;
                }
                else
                {
                    color = Brushes.Black;
                }
                return color;
            }
        }
    
        public virtual ProductType ProductType { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductCostHistory> ProductCostHistory { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductMaterial> ProductMaterial { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductSale> ProductSale { get; set; }
    }
}
